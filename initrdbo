#!/bin/sh

header="
  _      _ _          _ _         
 (_)_ _ (_) |_ _ _ __| | |__  ___ 
 | | ' \| |  _| '_/ _\` | '_ \/ _ \\
 |_|_||_|_|\__|_| \__,_|_.__/\___/
                                  
"
echo "$header"

KERNEL_RELEASE="$(uname -r)"
CONFIG_DIR="/etc/initrdbo.d"
ROOT_DIR="/"
INITRAMFS_OUT="/boot/initramfs-$KERNEL_RELEASE"
MODULES_FILE="/etc/modules"
KEEP_TMPDIR="no"
COMPRESSOR="xz" # The compressor is expanded, so you can pass arguments to it like `xz -z -9`
SKIP_CHECKS="no"

help="
usage: initrdbo [[ARGS]] [INITRAMFS_OUT]

OPTIONS:
	-h               Shows the program usage
	-k [RELEASE]     Sets the kernel release
	                 (Current: $KERNEL_RELEASE)
	-K               Keep temporary directory
	                 for inspection
	                 (Default: $KEEP_TMPDIR)
	-c               Sets the config directory
                         (Default: $CONFIG_DIR)
        -r               Sets the root directory
                         (Default: $ROOT_DIR)
        -m               Sets the modules file
                         (Default: $MODULES_FILE)
        -z [COMPRESSOR]  Sets the initramfs compressor
                         (Default: $COMPRESSOR)
  -n               Skip checks before making initramfs

	[INITRAMFS_OUT]: Output file of the initramfs
	                 (Current: $INITRAMFS_OUT)
"

usage() {
	echo "$help"
	exit 1
}

check_programs() {
	for prog in mount awk tr lddtree cpio "$COMPRESSOR"; do
		if ! which "$prog" > /dev/null 2>&1; then
			echo "[!] Missing program '$prog', cannot continue"
			exit 1
		fi
	done
}

parse_args() {
	INITRAMFS_OUT=""
	
	local prev=""
	for arg in $@; do
		case "$arg" in
		-h|--help) usage;;
		-K) KEEP_TMPDIR="yes";;
		-n) SKIP_CHECKS="yes";;
		-k|-c|-m|-z) prev="$arg";;
		*)
			case "$prev" in
				-k) KERNEL_RELEASE="$arg";;
				-c) CONFIG_DIR="$arg";;
				-m) MODULES_FILE="$arg";;
				-z) COMPRESSOR="$arg";;
				*) INITRAMFS_OUT="$arg";;
			esac
			prev=""
			;;
		esac
	done

	# Regenerate the INITRAMFS_OUT default parameter
	# because the KERNEL_RELEASE might have changed
	if [ -z "$INITRAMFS_OUT" ]; then
		INITRAMFS_OUT="/boot/initramfs-$KERNEL_RELEASE"
	fi
}

chroot_if_differs() {
	if [ "$ROOT_DIR" != "/" ]; then
		chroot $@
	else
		${@:2}
	fi
}

copy_kernel_modules() {
	local initrd_dir="$1"
	local modules_file="$2"
	local root_dir="$3"
	local kernel_release="$4"
	
	# Copy Linux kernel modules by file match
	local kmods=$(cat "$modules_file" | grep ^kernel/ | tr '\n' ' ' | xargs -0 printf "%s\n")
	for match in $kmods; do
		match_path="$root_dir/lib/modules/$kernel_release/"$match
		if [ ! -e "$match_path" ]; then
			echo "[!] '$match' was not found and got skipped"
			continue
		fi
		local files="$(find "$match_path")"
		for file in $files; do
			local file="$(printf "$file" | sed "s|.*/lib/modules/$kernel_release/||")"
			local directory=$(printf $file | awk -F '/' '{ $NF=""; print $0 }' | tr ' ' '/')

			mkdir -p "$initrd_dir/lib/modules/$kernel_release/$directory"
			cp -r "$root_dir/lib/modules/$kernel_release/"$file "$initrd_dir/lib/modules/$kernel_release/$directory/"
		done
	done

	# Copy Linux kernel modules by module name
	local kmods=$(cat "$modules_file" | grep -v ^kernel | sed 's/#.*//g' | tr '\n' ' ' | sed -E 's/\s+/ /g' | sed -E 's/^\s+//')
	for match in $kmods; do
		# requires 'kmod' package
		local files=$(chroot_if_differs "$root_dir" modprobe -S "$kernel_release" -D "$match" | tr '\n' ',')
		local files=$(printf "$files" | tr ',' '\n' | grep '^insmod' | sed -E 's/^insmod\s+//')
		for file in $files; do
			local file="$(printf "$file" | sed "s|.*/lib/modules/$kernel_release/||")"
			local directory="$(printf $file | awk -F '/' '{ $NF=""; print $0 }' | tr ' ' '/')"

			mkdir -p "$initrd_dir/lib/modules/$kernel_release/$directory"
			cp -r "$root_dir/lib/modules/$kernel_release/"$file "$initrd_dir/lib/modules/$kernel_release/$directory/"
		done
	done

	# Copy files required for modprobe to work
	mkdir -p "$initrd_dir/lib/modules/$kernel_release"
	cp "$root_dir/lib/modules/$kernel_release/modules."* "$initrd_dir/lib/modules/$kernel_release/"
}

copy_files() {
	local initrd_dir="$1"
	local root_dir="$2"
	local files="$(cat "$3" | sed 's/#.*//g')"

	for file in $(lddtree -R "$root_dir" -l $files); do
		if [ -d "$root_dir/$file" ]; then
			mkdir -p "$initrd_dir/$file"
			cp -r "$root_dir/$file/." "$initrd_dir/$file/."
		else
			local directory="$(printf $file | awk -F '/' '{ $NF=""; print $0 }' | tr ' ' '/')"
			local file="$(printf "$file" | sed "s|.*/||g")"

			mkdir -p "$initrd_dir/$directory"
			cp -r "$root_dir/$directory/$file" "$initrd_dir/$directory/$file"
		fi
	done
}

compress_initramfs() {
	local initrd_dir="$1"
	local output="$2"
	local oldwd="$(pwd)"

	cd "$initrd_dir"
	find . | cpio -R root:root -H newc -o | $COMPRESSOR > "$output"
	
	cd "$oldwd"
}

parse_args $@

echo "KERNEL_RELEASE=$KERNEL_RELEASE"
echo "ROOT_DIR=$ROOT_DIR"
echo "CONFIG_DIR=$CONFIG_DIR"
echo "INITRAMFS_OUT=$INITRAMFS_OUT"
echo "MODULES_FILE=$MODULES_FILE"
echo "KEEP_TMPDIR=$KEEP_TMPDIR"
echo

if [ "$SKIP_CHECKS" = "no" ]; then
	echo "[*] Checking dependencies..."
	check_programs
else
	echo "[*] Skipped checks"
fi

echo "[*] Creating temporary directory for initrd..."

tmpdir="$(mktemp -d)"
echo "tmpdir=$tmpdir"

echo "[*] Copying kernel modules to initrd dir..."
for file in $(ls "$CONFIG_DIR" | grep '.modules$'); do
	copy_kernel_modules "$tmpdir" "$CONFIG_DIR/$file" "$ROOT_DIR" "$KERNEL_RELEASE"
done

echo "[*] Copying required firmware to initrd dir..."

echo "[*] Copying required files to initrd dir..."
for file in $(ls "$CONFIG_DIR" | grep '.files$'); do
	echo "$file"
	copy_files "$tmpdir" "$ROOT_DIR" "$CONFIG_DIR/$file"
done

if [ -f "$MODULES_FILE" ]; then
	mkdir -p "$tmpdir/etc"
	# TODO: Make sure "/etc/modules" is not a directory
	cp "$MODULES_FILE" "$tmpdir/etc/modules"
fi

# From here on, errors are forbidden
# TODO: Better error handling
set -e

cp "$CONFIG_DIR/init" "$tmpdir/"

echo "[*] Setting up busybox..."
mkdir -p "$tmpdir/bin"
/bin/busybox --install -s "$tmpdir/bin"

echo "[*] Compressing files into initramfs..."
compress_initramfs "$tmpdir" "$(realpath $INITRAMFS_OUT)"

echo "[*] Cleaning up..."
if [ "$KEEP_TMPDIR" = "no" ]; then
	rm -rf "$tmpdir"
fi

echo "[*] Successfully generated initramfs!"
