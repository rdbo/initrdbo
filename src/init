#!/bin/sh

header="
  _      _ _          _ _         
 (_)_ _ (_) |_ _ _ __| | |__  ___ 
 | | ' \| |  _| '_/ _\` | '_ \/ _ \\
 |_|_||_|_|\__|_| \__,_|_.__/\___/
                                  
"
echo "$header"

# TODO: Set error handler that will spawn
#       troubleshooting shell

# dmesg -n 1

mount_pseudo_filesystems() {
	return # TODO: Remove
	
	mkdir -p /dev /proc /sys
	mount -t devtmpfs none /dev
	mkdir -p /dev/pts
	mount -t devpts none /dev/pts
	mount -t proc none /proc
	mount -t sysfs none /sys
}

set_variable_if_expected() {
	local option="$1"
	local expected_vars="init root rootfstype rd.init rd.live"
	for expected_var in $expected_vars; do
		var_name="$(printf "$expected_var" | tr '.' '_')"
		
		case "$option" in
		$expected_var=*)
			eval "_${var_name}"='${option#*=}'
			;;
		$expected_var)
			eval "_${var_name}"=yes
			;;
		*)
			continue
			;;
		esac

		break
	done
}

parse_kernel_cmdline_options() {
	for option in $(cat /proc/cmdline | xargs -n1); do
		set_variable_if_expected "$option"
	done
}

probe_kernel_modules() {
	for module in $(cat /etc/modules); do
		modprobe "$module"
	done

	if [ ! -z "$_rootfstype" ]; then
		modprobe "$rootfstype"
	fi

	# squashfs, loopback and overlayfs are
	# required for the live setup
	if [ ! -z "$_rd_live" ]; then
		modprobe squashfs
		modprobe loop
		modprobe overlay
	fi
}

mount_rootfs() {
	for i in $(seq 1 10); do
		local rootdev="$(findfs "$_root" | head -n 1)"
		if [ ! -z "$rootdev" ] && [ -b "$rootdev" ]; then
			break
		fi

		sleep 1
	done

	if [ -z "$rootdev" ]; then
		return 1
	fi

	mkdir -p /new_root

	if blkid "$rootdev" | grep 'TYPE="crypto_LUKS"' > /dev/null; then
		mkdir -p /run
		cryptsetup luksOpen "$rootdev" cryptroot
		if [ ! -b /dev/mapper/cryptroot ]; then
			return 2
		fi

		mount -t "$_rootfstype" /dev/mapper/cryptsigma /new_root
	else
		mount -t "$_rootfstype" "$rootdev" /new_root
	fi
}

echo "[*] Mounting pseudo filesystems..."
mount_pseudo_filesystems

echo "[*] Parsing kernel cmdline options..."
parse_kernel_cmdline_options

# Run custom init if "init=" option is set
if [ ! -z "$_init" ]; then
	echo "[*] Running custom init command: $_init"
	exec $_init
fi

echo "[*] Probing kernel modules..."
probe_kernel_modules

if [ -z "$_root" ]; then
	echo "[!] Missing 'root' option in kernel command line, spawning troubleshoot shell..."
	exec /bin/sh
fi

if [ -z "$_rootfstype" ]; then
	echo "[!] Missing 'rootfstype' option in kernel command line, spawning troubleshoot shell..."
	exec /bin/sh
fi

echo "[*] Mounting rootfs..."
if ! mount_rootfs; then
	echo "[!] Failed to mount the rootfs, spawning troubleshoot shell..."
	exec /bin/sh
fi
