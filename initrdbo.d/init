#!/bin/sh

header="
  _      _ _          _ _         
 (_)_ _ (_) |_ _ _ __| | |__  ___ 
 | | ' \| |  _| '_/ _\` | '_ \/ _ \\
 |_|_||_|_|\__|_| \__,_|_.__/\___/
                                  
"
echo "$header"

# TODO: Check if dependencies are present

# TODO: Set error handler that will spawn
#       troubleshooting shell

dmesg -n 1

mount_pseudo_filesystems() {
	mkdir -p /dev /proc /sys
	mount -t devtmpfs none /dev
	mkdir -p /dev/pts
	mount -t devpts none /dev/pts
	mount -t proc none /proc
	mount -t sysfs none /sys
}

set_variable_if_expected() {
	local option="$1"
	local expected_vars="init root rootfstype rd.init rd.live modules"
	for expected_var in $expected_vars; do
		var_name="$(printf "$expected_var" | tr '.' '_')"
		
		case "$option" in
		$expected_var=*)
			eval "_${var_name}"='${option#*=}'
			;;
		$expected_var)
			eval "_${var_name}"=yes
			;;
		*)
			continue
			;;
		esac

		break
	done
}

parse_kernel_cmdline_options() {
	for option in $(cat /proc/cmdline | xargs -n1); do
		set_variable_if_expected "$option"
	done
}

probe_kernel_modules() {
	if [ -f /etc/modules ]; then
		for module in $(cat /etc/modules); do
			modprobe "$module"
		done
	fi

	if [ ! -z "$_rootfstype" ]; then
		modprobe "$_rootfstype"
	fi

	# squashfs, loopback and overlayfs are
	# required for the live setup
	if [ ! -z "$_rd_live" ]; then
		modprobe squashfs
		modprobe loop
		modprobe overlay
	fi

	# modules passed in the kernel command line
	if [ ! -z "$modules" ]; then
		modprobe -a "$_modules"
	fi
}

mount_rootfs() {
	for i in $(seq 1 10); do
		local rootdev="$(findfs "$_root" | head -n 1)"
		if [ ! -z "$rootdev" ] && [ -b "$rootdev" ]; then
			break
		fi

		sleep 1
	done

	if [ -z "$rootdev" ]; then
		return 1
	fi

	mkdir -p /media/root

	if blkid "$rootdev" | grep 'TYPE="crypto_LUKS"' > /dev/null; then
		mkdir -p /run
		modprobe -a dm-mod dm-crypt crc32c
		cryptsetup luksOpen "$rootdev" cryptroot
		if [ ! -b /dev/mapper/cryptroot ]; then
			return 2
		fi

		mount -t "$_rootfstype" /dev/mapper/cryptroot /media/root
	else
		mount -t "$_rootfstype" "$rootdev" /media/root
	fi
}

setup_liveboot() {
	mkdir -p /live
	mount -t squashfs "/media/root/${_rd_live}" /live

	mkdir -p /upper /work /new_root
	mount -t overlay overlay -o lowerdir=/live,upperdir=/upper,workdir=/work /new_root

	mkdir -p /new_root/media/root
	mount -r -R /media/root /new_root/media/root

	mkdir -p /new_root/live
	mount -r /new_root/cdrom/rootfs.squashfs /new_root/live
}

setup_new_root() {
	# If the new root directory doesn't exist yet,
	# it will be the same as the root partition
	if [ ! -e /new_root ]; then
		mkdir -p /new_root
		mount -r -R /media/root /new_root
	fi

	mkdir -p /new_root/dev /new_root/proc /new_root/sys
	mount -t devtmpfs none /new_root/dev
	mount -t proc none /new_root/proc
	mount -t sysfs none /new_root/sys
}

echo "[*] Mounting pseudo filesystems..."
mount_pseudo_filesystems

echo "[*] Parsing kernel cmdline options..."
parse_kernel_cmdline_options

# Run custom init if "init=" option is set
if [ ! -z "$_init" ]; then
	echo "[*] Running custom init command: $_init"
	exec $_init
fi

echo "[*] Probing kernel modules..."
probe_kernel_modules

if [ -z "$_root" ]; then
	echo "[!] Missing 'root' option in kernel command line, spawning troubleshoot shell..."
	exec /bin/sh
fi

if [ -z "$_rootfstype" ]; then
	echo "[!] Missing 'rootfstype' option in kernel command line, spawning troubleshoot shell..."
	exec /bin/sh
fi

echo "[*] Mounting rootfs..."
if ! mount_rootfs; then
	echo "[!] Failed to mount the rootfs, spawning troubleshoot shell..."
	exec /bin/sh
fi

# Run custom init if "rd.init=" option is set
# (relative to /media/root)
if [ ! -z "$_init" ]; then
	echo "[*] Running custom init command: $_init"
	exec chroot /media/root $_init
fi

# Setup liveboot if it is asked
if [ ! -z "$_rd_live" ]; then
	echo "[*] Setting up liveboot..."

	if [ ! -f "/media/root/${_rd_live}" ]; then
		echo "[!] Missing liveboot rootfs, spawning troubleshoot shell..."
		exec /bin/sh
	fi
	
	setup_liveboot
fi

echo "[*] Setting up new root..."
setup_new_root

echo "[*] Switching to new root..."
exec switch_root /new_root /sbin/init
